{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","reversed","setReversed","NONE","sortType","setSortType","sortedGoods","goods","visibleGoods","ALPHABET","sort","firstGood","secondGood","localeCompare","LENGTH","length","reverse","getReorderedGoods","isSorted","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KA8BA,IAiBMC,EA7CN,SAA2BC,GACzB,IAAMC,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKP,EAASY,SACZD,EAAaE,MAAK,SAACC,EAAWC,GAAZ,OAChBD,EAAUE,cAAcD,MAE1B,MAEF,KAAKf,EAASiB,OACZN,EAAaE,MAAK,SAACC,EAAWC,GAAZ,OAChBD,EAAUI,OAASH,EAAWG,UAIlC,KAAKlB,EAASM,MAShB,OAJIF,GACFO,EAAaQ,UAGRR,EAoBWS,CAAkBnB,GAChCoB,EAAWjB,GAAYG,IAAaP,EAASM,KAEnD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaP,EAASY,WAEtCa,QAAS,WA5BfjB,EAAYR,EAASY,WAsBjB,iCAWA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaP,EAASiB,SAEtCQ,QAAS,WAnCfjB,EAAYR,EAASiB,SA6BjB,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAapB,IAEjBqB,QAAS,WA1CfpB,GAAaD,IAoCT,qBAWCiB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA/CjBpB,GAAY,QACZG,EAAYR,EAASM,OA2Cf,sBAUJ,6BACGG,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAOL,UAAU,OAAxC,SACGK,GADMA,YC1HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fc7e65d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [reversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  function getReorderedGoods(goods: string[]) {\n    const visibleGoods = [...goods];\n\n    switch (sortType) {\n      case SortType.ALPHABET:\n        visibleGoods.sort((firstGood, secondGood) => (\n          firstGood.localeCompare(secondGood)\n        ));\n        break;\n\n      case SortType.LENGTH:\n        visibleGoods.sort((firstGood, secondGood) => (\n          firstGood.length - secondGood.length\n        ));\n        break;\n\n      case SortType.NONE:\n      default:\n        break;\n    }\n\n    if (reversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  }\n\n  const handleAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setReversed(!reversed);\n  };\n\n  const handleReset = () => {\n    setReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const sortedGoods = getReorderedGoods(goodsFromServer);\n  const isSorted = reversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => handleAlphabet()}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => handleLength()}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !reversed },\n          )}\n          onClick={() => handleReverse()}\n        >\n          Reverse\n        </button>\n\n        {isSorted && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\" className=\"good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}